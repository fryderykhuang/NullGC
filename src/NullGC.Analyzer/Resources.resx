<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="NGC10_Description" xml:space="preserve">
    <value />
  </data>
  <data name="NGC10_MessageFormat" xml:space="preserve">
    <value>Value type '{0}' will be boxed to '{1}' at runtime</value>
  </data>
  <data name="NGC10_Title" xml:space="preserve">
    <value>Value type will be boxed</value>
  </data>
  <data name="NGC11_Description" xml:space="preserve">
    <value />
  </data>
  <data name="NGC11_MessageFormat" xml:space="preserve">
    <value>LINQ struct '{0}' will be boxed to '{1}' at runtime</value>
  </data>
  <data name="NGC11_Title" xml:space="preserve">
    <value>LINQ chain will be boxed</value>
  </data>
  <data name="NGC12_Description" xml:space="preserve">
    <value />
  </data>
  <data name="NGC12_MessageFormat" xml:space="preserve">
    <value>The specific overload of Linq operator '{0}' is not implemented yet, the LINQ chain will be boxed at runtime to be able to use as an IEnumerable</value>
  </data>
  <data name="NGC12_Title" xml:space="preserve">
    <value>This LINQ operator overload is not implemented</value>
  </data>
  <data name="NGC20_Description" xml:space="preserve">
    <value />
  </data>
  <data name="NGC20_MessageFormat" xml:space="preserve">
    <value>Borrow() or Take() should be called on IExplicitOwnership`1 typed argument when being passed by value</value>
  </data>
  <data name="NGC20_Title" xml:space="preserve">
    <value>Borrow() or Take() should be called when passed by value</value>
  </data>
  <data name="NGC21_Description" xml:space="preserve">
    <value />
  </data>
  <data name="NGC21_MessageFormat" xml:space="preserve">
    <value>You can specify either Owned or Borrowed attribute but not both</value>
  </data>
  <data name="NGC21_Title" xml:space="preserve">
    <value>Conflict explicit ownership attributes</value>
  </data>
  <data name="NGC22_Description" xml:space="preserve">
    <value />
  </data>
  <data name="NGC22_MessageFormat" xml:space="preserve">
    <value>Borrow() or Take() should be called on IExplicitOwnership`1 typed value that assigns to `ref` or `out` parameter</value>
  </data>
  <data name="NGC22_Title" xml:space="preserve">
    <value>Borrow() or Take() should be called on `ref` or `out` parameter</value>
  </data>
  <data name="NGC23_Description" xml:space="preserve">
    <value />
  </data>
  <data name="NGC23_MessageFormat" xml:space="preserve">
    <value>Borrow() or Take() should be called on return value that is IExplicitOwnership`1 typed</value>
  </data>
  <data name="NGC23_Title" xml:space="preserve">
    <value>Borrow() or Take() should be called on return value</value>
  </data>
  <data name="NGC24_Description" xml:space="preserve">
    <value />
  </data>
  <data name="NGC24_MessageFormat" xml:space="preserve">
    <value>The ownership kind of source of assignment '{0}' is incompatible with the target of assignment '{1}'</value>
  </data>
  <data name="NGC24_Title" xml:space="preserve">
    <value>Incompatible ownership kind between source and target of assignment</value>
  </data>
  <data name="NGC25_Description" xml:space="preserve">
    <value />
  </data>
  <data name="NGC25_MessageFormat" xml:space="preserve">
    <value>The callee can potentially call Dispose() on the IExplicitOwnership`1 typed argument, thus either examine the callee's behavior carefully to ensure no Dispose() will be called or make the ownership explicit by calling Borrow()/Take() or Tag the argument value with ownership attributes</value>
  </data>
  <data name="NGC25_Title" xml:space="preserve">
    <value>Potential double-free situation if the callee may call Dispose() on argument value</value>
  </data>
  <data name="NGC26_Description" xml:space="preserve">
    <value />
  </data>
  <data name="NGC26_MessageFormat" xml:space="preserve">
    <value>Ownership of some return path(s) in the method body are not explicitly specified</value>
  </data>
  <data name="NGC26_Title" xml:space="preserve">
    <value>Ownership of some return path(s) are not explicitly specified</value>
  </data>
  <data name="NGC27_Description" xml:space="preserve">
    <value />
  </data>
  <data name="NGC27_MessageFormat" xml:space="preserve">
    <value>Not all return paths have the same ownership kind.</value>
  </data>
  <data name="NGC27_Title" xml:space="preserve">
    <value>Not all return paths have the same ownership kind.</value>
  </data>
</root>